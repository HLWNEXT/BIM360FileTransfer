/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodesk’s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge.Model
{
    /// <summary>
    /// Group of miscs
    /// </summary>
    [DataContract]
    public partial class JobPayloadMisc :  IEquatable<JobPayloadMisc>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JobPayloadMisc" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JobPayloadMisc() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JobPayloadMisc" /> class.
        /// </summary>
        /// <param name="Workflow">Workflow ID of a set of jobs as the scope for Model Derivative events. The workflow ID of the set of jobs is designated by you to indicate that all of the jobs belong to the same workflow. (https://developer.autodesk.com/en/docs/webhooks/v1/tutorials/create-a-hook-model-derivative/). (required).</param>
        public JobPayloadMisc(string Workflow = null)
        {
            // to ensure "Workflow" is required (not null)
            if (Workflow == null)
            {
                throw new InvalidDataException("Workflow is a required property for JobPayloadMisc and cannot be null");
            }
            else
            {
                this.Workflow = Workflow;
            }
        }
        
        /// <summary>
        /// Workflow ID of a set of jobs as the scope for Model Derivative events. The workflow ID of the set of jobs is designated by you to indicate that all of the jobs belong to the same workflow. (https://developer.autodesk.com/en/docs/webhooks/v1/tutorials/create-a-hook-model-derivative/). 
        /// </summary>
        /// <value>Workflow ID of a set of jobs as the scope for Model Derivative events. The workflow ID of the set of jobs is designated by you to indicate that all of the jobs belong to the same workflow. (https://developer.autodesk.com/en/docs/webhooks/v1/tutorials/create-a-hook-model-derivative/). </value>
        [DataMember(Name="workflow", EmitDefaultValue=false)]
        public string Workflow { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JobPayloadMisc {\n");
            sb.Append("  Workflow: ").Append(Workflow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as JobPayloadMisc);
        }

        /// <summary>
        /// Returns true if JobPayloadMisc instances are equal
        /// </summary>
        /// <param name="other">Instance of JobPayloadMisc to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobPayloadMisc other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Workflow == other.Workflow ||
                    this.Workflow != null &&
                    this.Workflow.Equals(other.Workflow)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Workflow != null)
                    hash = hash * 59 + this.Workflow.GetHashCode();
                return hash;
            }
        }
    }

}

